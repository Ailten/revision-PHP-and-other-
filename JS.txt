
// --- JS ---

// comment single line.
/* comment many line. */
"use strict"  // a string set all up of a JS script, to make it force use strict syntax.

let myVar = 5;  // set a variable (disapear in end of scop).
var myVar = 5;  // set a variable.
const myConst = 5;  // set a constance (can't be edited value).

typeof(...)  // return the type of something.
Null  // value when something is null.
undefined  // value when something is not found properly.
Infinity  // value to represent the infinity numeric.
==  // compare equality (value only).
===  // compare equality (value and type)
myVar instanceof Array  // check if is an array (check type alternative).

document.getElementById('demo').innerHTML = "a";  // edit DOM text contend (by geting by id attribute, return one element or undefined).
document.getElementById('demo').innerText = "a";  // same as innerHTML but text only (prevent injection).
document.getElementById('demo').style.backgroundColor = "red";  // set CSS by the DOM.
document.getElementsByClassName('demo')  // get dom by class (return a array of element).
document.getElementsByTagName('demo')  // get dom by name balise html (return array).
document.querySelector("p");  // get dom by a query (like css selector).
window.addEventListener("load", (evnt) => {});  // set an event on window, trigger when it load end.

"...", '...', `...`  // way to set a string value.
'..' + '.'  // concat.
`...${myVar}`  // concat with placeholder.
'...'.length  // get length of a string.
'...'[0]  // get char at an index send.
'...'.substring(1, 2)  // cut a part of string (index start, index end).
'...'.substr(1, 2)  // cut a part of string (index start, length take) depreciate !.
'...'.slice(1, 2)  // cut a part of string (like substring, but can take parameter negative).
'...'.split(regex)  // cast string into array (send param the mark use as cut).
'...'.toUpperCase()  // cast in upper.
'...'.toUpperCase()  // cast in lower.
'...'.trim()  // remove space at start and end.
'...'.replace("A", "B")  // replace the first ocurence of A by B (can take a regex).
'...'.replaceAll("A", "B")  // same as replace, but to all ocurence.
'...'.indexOf("A")  // return the index of "A" in string.
'...'.search("A")  // same as indexOf.
'...'.includes("A")  // return true if string contain "A".
'...'.startWith("A")  // return true if string start by "A".
myVar.toString()  // cast into string.
/^[a-z]$/  // set a regex (to one char betwin "a" and "z").
/^[a-zA-Z]$/  // same include maj.
/^[a-z]$/i  // same (i for take lower and upper case.
/^[0-9]$/  // regex 0 to 9.
/^[0-9]{2,5}$/  // same but betwin 2 and 5 digit.
^  // mark as start string.
$  // mark as end string.
(a|b)  // mark as "a" OR "b".
/g  // g for find all ocurence.
replace, match, search  // function string use regex.
/a/.exec(myString)  // return the part string find by regex.
/a/.text(myString)  // return true if the string pass succesfuly the regex.

if(...) {}  // if.
else if(...) {}  // else if.
else {}  // else.
(...? A: B)  // ternaire.
switch(...) { case ...: break; default: }  // switch.
while(...) {}  // while.
do {} while(...) {}  // do while.
for(let i=0; i<length; i++) {}  // for.
[...].forEach(e => {});  // foreach.
break;  // break, exit loop.
continue;  // continue, exit current iteration.

let myAr = [2, 5]  // set an array.
myAr[0]  // get first element of array.
myAr.length;  // get length of array.
myAr.push(6)  // add a new element at end array.
myAr.pop()  // drop the last element.
myAr.shift()  // drop the first element.
myAr.every(() => true)  // loop on every element and return true if all return true.
myAr.some(() => true)  // return true if at least one return true by lambda.
myAr.fill(null, 1, 1)  // fill all element with "null", from index 1 to index 1 (not include).
myAr.filer(() => true)  // filter the element who return false by the lambda.
myAr.find(() => true)  // return the firt element who return true by lambda.
myAr.findIndex(() => true)  // same but return the index (not the element).
myAr.findLast(() => true)  // same but return the last (not the first).
myAr.forEach(() => {})  // loop on array to make a proces for eatch element.
myAr.includes('...')  // return true if contain the element send.
myAr.join(",")  // concat element into one string.
myAr.keys()  // return all keys of array in another array (usefull with dictionary).
myAr.map(() => {})  // cast eatch element in a new array.
myAr.reduce((cumul, e) => cumul+e, 0)  // loop on eatch element and cumul on a variable the result at eatch passage one by one.
myAr.reduceRight()  // same but begin from the last one.
myAr.reverse()  // return a new array backward.
myAr.slice(2, 4)  // return a short peace of the array (start at index 2 end at index 4).
myAr.splice(2, 4, null)  // replace a peace of array by the value send (null) (2 index start, 4 length element replace, null value inserted (only once)).
myAr.sort()  // order the array element.
Array.isArray(myAr)  // return true if is an array type.
new Set()  // array who can only have be add element and not twice the same (not usefulle).
new Map()  // array with key value pair (like dictionary).

Math.round, .floor, .ceil, .trunc  // round number decimal.
Math.sign  // return if the value send is under or uper zero (return -1, 0, 1).
Math.PI  // pi.
Math.random  // return a number decimal between 0 and 1 (not include).
Math.abs  // return the value absolute (positive) of a number.
Math.pow  // do exposent.
Math.sqrt  // do square root.
Math.sin, .cos, .tan  // make sinus cosinus tangante.
Math.min, .max  // return the min or max value from all value send in paramers.
Math['myConst'] = 32  // set something in math object (use carfully).

function myFunc() {}  // set a function.
() => {}  // lambda (function short syntax).
return;  // exit of a function scope (can return a value).
(function myFunc() => {})();  // function auto call.
// fermeture : act to make a function who return a function (and stock value on the function can be edited, like to make conter).

let myObj = {}  // set an object.
let myObj = {name: 'Thomas'}  // set object with parameters.
myObj.name  // return a parameter of object.
myObj['name']  // same.
function Obj() { this.name = 'Thomas'; }  // make a function who return an object (alternative way).
let myObj = new Obj();  // instancie an object from a function.
class Obj { constructor() { this.name = 'Thomas'; } }  // class (syntax alternative).
class Obj extends ObjParent {}  // class eritage (set by a parent).
static name = 'Thomas';  // attributes static (same value for all class).
Object.values(Obj)  // return an array of properties object.
for(let [key, value] of Object.entries(myObj)) {}  // loop on every attributes of an object.
JSON.stringify(myObj)  // cast object into json string.
JSON.parse(myString)  // cast string json into object.
myObj instanceof Obj  // check if is an instance of Obj (like typeof).

new Date()  // make a date (as now).
Date.now();  // same.
new Date("2022-03-25");  // by sending a string.
new Date(milisec)  // make a date by sending amount of milisec.
new Date(year,month,day)  // make a date by sending param.
new Date(year,month,day,hours,minutes,seconds)  // set all date param.
Intl.DateTimeFormat("fr-FR").format(new Date())  // return date string has a national format (can take an obj in second param to param type of data take).
date.getHours()  // get hours from a date.
date.getMinutes()  // same for minutes.
date.getDay()  // get index day of week.
date.getDate()  // get index day of month.
date.getMonth()  // get month.
date.getFullYear()  // get year.
date.setDate()  // edit a date obj to set the day of the month. (have all equivalence like get).

try {}  // make a block to catch error.
catch(err) {}  // make a block to handle error catched.
finally {}  // make a block already call at end (like to close flux).
err.name  // get name of error.
throw 404;  // throw an error (can take a string).

async  // make a function asyncrone (when call, execute it in a second thread).
await  // force to call a function syncrone (when a function is async, call it sync).
setTimeout  // function to wait an amount of milisec before execute it (in async way).
setInterval  // same but call every eatch milisec interval.
Promise  // object returned from an async call (to know when it finish and get value returned).
clearTimeout  // cancel an execution call by setTimeout.
clearInterval  // same for interval.


// --- advenced ---


